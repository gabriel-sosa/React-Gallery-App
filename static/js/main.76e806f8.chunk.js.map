{"version":3,"sources":["components/search-form.js","components/nav-bar.js","components/image.js","components/not-found.js","components/photo-container.js","config.js","App.js","serviceWorker.js","index.js"],"names":["search_form","_ref","input","history","loadImages","react_default","a","createElement","className","onSubmit","e","preventDefault","push","concat","value","type","name","placeholder","required","ref","inp","fill","height","viewBox","width","xmlns","d","nav_bar","NavLink","to","Image","source","src","alt","not_found","photo_container","display","images","finishedLoading","length","map","image","components_image","key","id","apiKey","createBrowserHistory","App","state","tag","_this","setState","fetch","apikey","then","data","json","photos","photo","item","farm","server","secret","catch","err","console","log","_this2","this","searchImages","loc","match","matchPath","pathname","path","params","location","listen","_this3","Router","Switch","Route","exact","render","Component","Boolean","window","hostname","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.76e806f8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default ({history, loadImages}) => {\r\n\tlet input;\r\n\r\n\tconst handleSubmit = e => {\r\n\t\te.preventDefault();\r\n\t\thistory.push(`/search/${input.value}`);\r\n\t\tinput.value = '';\r\n\t}\r\n\r\n\treturn (\r\n\t\t<form className=\"search-form\" onSubmit={handleSubmit}>\r\n\t      <input type=\"search\" name=\"search\" placeholder=\"Search\" required ref={(inp) => input = inp}/>\r\n\t      <button type=\"submit\" className=\"search-button\">\r\n\t        <svg fill=\"#fff\" height=\"24\" viewBox=\"0 0 23 23\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n\t          <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"/>\r\n\t          <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n\t        </svg>\r\n\t      </button>\r\n\t    </form>\r\n\t)\r\n}","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nexport default () => (\r\n\t<nav className=\"main-nav\">\r\n\t  <ul>\r\n\t    <li><NavLink to='/cat'>Cats</NavLink></li>\r\n\t    <li><NavLink to='/dog'>Dogs</NavLink></li>\r\n\t    <li><NavLink to='/computer'>Computers</NavLink></li>\r\n\t  </ul>\r\n\t</nav>\r\n)","import React from 'react';\r\n\r\nconst Image = ({source}) => (\r\n\t<li>\r\n\t\t<img src={source} alt=\"\" />\r\n\t</li>\r\n)\r\n\r\nexport default Image;","import React from 'react';\r\n\r\nexport default () => (\r\n\t<li className=\"not-found\">\r\n    \t<h3>No Results Found</h3>\r\n    \t<p>You search did not return any results. Please try again.</p>\r\n    </li>\r\n)","import React from 'react';\r\nimport Image from './image.js';\r\nimport NotFound from './not-found.js';\r\n\r\nexport default ({images, finishedLoading}) => {\r\n  let display;\r\n\r\n  if (!finishedLoading)\r\n    display = <h3>Loading...</h3>;\r\n  else if (images.length === 0)\r\n    display = <NotFound />\r\n  else\r\n    display = images.map(image => <Image source={image.image} key={image.id} />);\r\n\r\n  return (\r\n  <div className=\"photo-container\">\r\n    <h2>Results</h2>\r\n    <ul>\r\n      {display}\r\n    </ul>\r\n  </div>\r\n)}","const apiKey = 'a235f7a6f0001cf068cb9fd98e13f1c2';\r\nexport default apiKey;","// react and router imports\nimport React, { Component } from 'react';\nimport {\n  Router,\n  Route,\n  Switch,\n  matchPath\n} from 'react-router-dom'\nimport { createBrowserHistory } from \"history\";\n//my components imports\nimport SearchForm from './components/search-form.js';\nimport Navbar from './components/nav-bar.js';\nimport PhotoContainer from './components/photo-container.js';\nimport apikey from './config.js';\n//create custom history object for the Router\nconst history = createBrowserHistory();\n\nclass App extends Component {\n  //The states of the class, the array of images and a boolen to know whether the fetch call was made or not\n  state = {\n    images: [],\n    finishedLoading: true\n  }\n  //this function takes care of making the fetch call\n  loadImages = tag => {\n    this.setState({finishedLoading: false});\n    const amount = 16;\n    fetch(`https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apikey}&format=json&tags=${tag}&page=1&per_page=${amount}&nojsoncallback=1`)\n      .then(data => data.json())\n      .then(data => data.photos.photo)\n      .then(data => this.setState({\n         images: data.map(item => ({\n            image: `https://farm${item.farm}.staticflickr.com/${item.server}/${item.id}_${item.secret}.jpg`,\n            id: item.id\n          }))\n      }))\n      .then(() => this.setState({finishedLoading: true}))\n      .catch(err => console.log(err))\n      .catch(() => this.setState({finishedLoading: true}));\n  }\n  //when the component is created first checks the url to display the correct information, \n  //then sets the history object to listen for changes in the location, this way is easier to handle the nav bars and the search bar\n  componentDidMount() {\n    const searchImages = loc => {\n      const match = matchPath(loc.pathname, {path: \"/search/:tag\"}) || matchPath(loc.pathname, {path: \"/:tag\"});\n      console.log(match);\n      match && this.loadImages(match.params.tag)\n    }\n    searchImages(history.location);\n    history.listen(searchImages);\n  }\n  //the render method\n  render() {\n    return (\n      <Router history={history}>{/*the Router component is created with a custom history object*/}\n        <div className=\"container\">\n          {/*the history object is passed down to the SearchForm so the component ca redirect to the search route*/}\n          <SearchForm history={history} loadImages={this.loadImages} />\n          <Navbar />\n          <Switch>\n            {/*the root path will display a friendly message, inviting the user to search for an item*/}\n            <Route exact path=\"/\" render={() => (<h3>search an Item</h3>)} />\n            {/*the navigation bar routes*/}\n            <Route exact path=\"/:tag\" render={() => (<PhotoContainer images={this.state.images} finishedLoading={this.state.finishedLoading} />)} />\n            {/*the search route*/}\n            <Route exact path=\"/search/:tag\" render={() => (<PhotoContainer images={this.state.images} finishedLoading={this.state.finishedLoading} />)} />\n            {/*the route when the location doesn't match any other path*/}\n            <Route render={() => (<h3>Error 404: this path does not exist</h3>)} />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}